{"version":3,"sources":["Api.js","store.js","components/pokemon/Pokemon.js","components/pokemonDetails/PokemonDetails.js","components/pokemonList/PokemonList.js","App.js","index.js"],"names":["getResponse","url","a","fetch","pokemons","json","loadPokemonsFromServer","getPokemonInfo","getAllTypes","setSelectedPokemon","name","type","getPokemons","state","getPokemonsInfo","pokemonsInfo","getSelectedPokemon","selectedPocemon","getSeverInfo","serverInfo","getPokemonTypes","pokemonTypes","getFilteredPokemons","filteredPokemons","store","createStore","action","results","types","filterQuery","filter","pokemon","some","typeItem","length","applyMiddleware","thunk","setSpritesClass","sprite","connect","dispatch","pokemonInfo","sprites","sort","b","slot","className","data-name","onClick","event","currentTarget","dataset","src","front_default","charAt","toUpperCase","slice","map","item","key","PokemonDetails","id","stats","stat","localeCompare","toString","getId","itemStat","getStatName","base_stat","selectedPokemon","loadPokemons","then","setPokemonsInfo","loadPokemonTypes","setPokemonTypes","setFilterQuery","filterPokemons","loadPokemonsInfo","Promise","all","useEffect","Select","placeholder","options","value","text","getSelectOptions","onChange","target","textContent","find","Segment","Dimmer","active","inverted","Loader","Image","next","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ac24a909.chunk.js","sourcesContent":["const getResponse = async (url) => {\n  const pokemons = await fetch(url);\n\n  return pokemons.json();\n};\n\nexport const loadPokemonsFromServer = async (url) => {\n  return await getResponse(url);\n};\n\nexport const getPokemonInfo = async (url) => {\n  return await getResponse(url);\n};\n\nexport const getAllTypes = async (url) => {\n  return await getResponse(url);\n}\n\n","import { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport {getAllTypes, loadPokemonsFromServer} from './Api';\n\n//action types\nconst HANDLE_LOADING_SUCCESS = 'HANDLE_LOADING_SUCCESS';\nconst SET_POKEMONS_INFO = 'SET_POKEMONS_INFO';\nconst SET_SELECTED_POKEMON = 'SET_SELECTED_POKEMON';\nconst SET_POKEMON_TYPES = 'SET_POKEMON_TYPES';\nconst FILTER_POKEMONS = 'FILTER_POKEMONS';\nconst SET_FILTER_QUERY = 'SET_FILTER_QUERY';\n\n//action creators\nconst handleSuccess = (serverInfo) => ({ type: HANDLE_LOADING_SUCCESS, serverInfo });\nconst setPokemonTypes = (types) => ({ type: SET_POKEMON_TYPES, types });\nexport const setPokemonsInfo = (pokemonsInfo) => ({ type: SET_POKEMONS_INFO, pokemonsInfo });\nexport const setSelectedPokemon = (name) => ({ type: SET_SELECTED_POKEMON, name});\nexport const filterPokemons = () => ({ type: FILTER_POKEMONS });\nexport const setFilterQuery = (filterQuery) => ({ type: SET_FILTER_QUERY, filterQuery});\nexport const loadPokemons = (url) => {\n  return (dispatch) => {\n    loadPokemonsFromServer(url)\n      .then(pokemons => dispatch(handleSuccess(pokemons)));\n  };\n};\nexport const loadPokemonTypes = (url) => {\n  return (dispatch) => {\n    getAllTypes(url)\n      .then(types => dispatch(setPokemonTypes(types)));\n  };\n};\n\n\n//selectors\nexport const getPokemons = state => state.pokemons;\nexport const getPokemonsInfo = state => state.pokemonsInfo;\nexport const getSelectedPokemon = state => state.selectedPocemon;\nexport const getSeverInfo = state => state.serverInfo;\nexport const getPokemonTypes = state => state.pokemonTypes;\nexport const getFilteredPokemons = state => state.filteredPokemons;\n\n\n//state\nconst initialState = {\n  serverInfo: null,\n  pokemons: [],\n  pokemonsInfo: null,\n  selectedPocemon: null,\n  pokemonTypes: null,\n  filteredPokemons: null,\n  filterQuery: null\n};\n\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case HANDLE_LOADING_SUCCESS:\n      return ({\n        ...state,\n        serverInfo: action.serverInfo,\n        pokemons: [...state.pokemons, ...action.serverInfo.results]\n      });\n    case SET_POKEMONS_INFO:\n      return ({ ...state, pokemonsInfo: action.pokemonsInfo });\n    case SET_SELECTED_POKEMON:\n      return ({ ...state, selectedPocemon: action.name });\n    case SET_POKEMON_TYPES:\n      return ({ ...state, pokemonTypes: action.types });\n    case SET_FILTER_QUERY:\n      return ({ ...state, filterQuery: action.filterQuery });\n    case FILTER_POKEMONS: {\n      let filteredPokemons = state.pokemonsInfo.filter(pokemon => pokemon.types.some(typeItem => typeItem.type.name === state.filterQuery));\n\n      filteredPokemons = filteredPokemons.length > 0 ? filteredPokemons : null;\n\n      return ({ ...state, filteredPokemons });\n    }\n    default:\n      return state;\n  }\n};\n\nconst store = createStore(\n  reducer,\n  initialState,\n  applyMiddleware(thunk)\n);\n\nexport default store;\n","import React from 'react';\nimport './Pokemon.css';\nimport { connect } from 'react-redux';\nimport { setSelectedPokemon } from '../../store';\n\n\n\nconst setSpritesClass = (sprite) => {\n  switch (sprite) {\n    case 'grass':\n      return 'pokemon__sprite grass';\n    case 'poison':\n      return 'pokemon__sprite poison';\n    case 'electric':\n      return 'pokemon__sprite electric';\n    case 'fire':\n      return 'pokemon__sprite fire';\n    case 'flying':\n      return 'pokemon__sprite flying';\n    case 'water':\n      return 'pokemon__sprite water';\n    case 'bug':\n      return 'pokemon__sprite bug';\n    case 'ground':\n      return 'pokemon__sprite ground';\n    case 'fairy':\n      return 'pokemon__sprite fairy';\n    default:\n      return 'pokemon__sprite default';\n  }\n};\n\nconst Pokemon = ({ pokemonInfo: { name, sprites, types }, setSelectedPokemon }) => {\n  const pokemonClick = (event) => {\n    setSelectedPokemon(event.currentTarget.dataset.name);\n  };\n\n  if (types.length > 1) {\n    types.sort((a, b) => a.slot - b.slot);\n  }\n\n  return (\n    <div className=\"pokemon\" data-name={name} onClick={pokemonClick}>\n      <img className=\"pokemon__img\" src={sprites.front_default} />\n      <h3 className=\"pokemon__name\">{name.charAt(0).toUpperCase() + name.slice(1)}</h3>\n      <div className=\"pokemon__sprites\">\n        {types.map(item => (\n          <div\n            className={setSpritesClass(item.type.name)}\n            key={item.type.name}\n          >\n            {item.type.name}\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nconst mapStateToProps = state => ({ });\n\nconst mapDispatchToProps = dispatch => ({\n  setSelectedPokemon: name => dispatch(setSelectedPokemon(name)),\n});\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Pokemon);\n","import React from 'react';\nimport './PokemonDetails.css';\n\nconst getId = (id) => {\n  id = id.toString();\n\n  if (id.length === 1) return `00${id}`;\n  else if (id.length === 2) return `0${id}`;\n  else\n    return id;\n};\n\nconst getStatName = (name) => {\n  switch (name) {\n    case 'attack':\n      return 'Attack';\n    case 'defense':\n      return 'Defense';\n    case 'hp':\n      return 'Hp';\n    case 'special-attack':\n      return 'SP Attack';\n    case 'special-defense':\n      return 'SP defence';\n    case 'speed':\n      return 'Speed';\n    default:\n      return name;\n  }\n};\n\nconst PokemonDetails = ({ pokemonInfo: { id, name, sprites, stats } }) => {\n  stats.sort((a, b) => a.stat.name.localeCompare(b.stat.name));\n\n  return (\n    <div className=\"details\">\n      <img className=\"details__img\" src={sprites.front_default} />\n      <h2 className=\"details__name\">\n        {`${name.charAt(0).toUpperCase() + name.slice(1)} #${getId(id)}`}\n      </h2>\n      <table className=\"details__table\">\n        <thead>\n          <tr>\n            <th className=\"table__col\">Type</th>\n            <th className=\"table__col\">Fire</th>\n          </tr>\n        </thead>\n        <tbody>\n          {stats.map(itemStat => (\n            <tr key={itemStat.stat.name}>\n              <td className=\"table__col\">{getStatName(itemStat.stat.name)}</td>\n              <td className=\"table__col\">{itemStat.base_stat}</td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n\nexport default PokemonDetails;\n","import React, { useEffect } from 'react';\nimport './PokemonList.css';\nimport { connect } from 'react-redux';\nimport { loadPokemons, getPokemons, getPokemonsInfo, setPokemonsInfo, getSelectedPokemon, getSeverInfo, setSelectedPokemon, getPokemonTypes, loadPokemonTypes, setFilterQuery, getFilteredPokemons, filterPokemons } from '../../store';\nimport { Dimmer, Loader, Image, Segment, Select } from 'semantic-ui-react';\nimport { getPokemonInfo} from '../../Api';\nimport Pokemon from '../pokemon/Pokemon';\nimport PokemonDetails from \"../pokemonDetails/PokemonDetails\";\n\n\nconst PokemonList = ({ loadPokemons, pokemons, pokemonsInfo, setPokemonsInfo, selectedPokemon, serverInfo, setSelectedPokemon, pokemonTypes, loadPokemonTypes, filteredPokemons, setFilterQuery, filterPokemons }) => {\n  const loadPokemonsInfo = async (pokemons) => {\n    const pokemonsInfo = await Promise.all(pokemons.map(item => getPokemonInfo(item.url)));\n\n    setPokemonsInfo(pokemonsInfo);\n    filterPokemons();\n  };\n\n  //component did mount\n  useEffect(() => {\n    loadPokemons('http://pokeapi.co/api/v2/pokemon/?limit=12');\n    loadPokemonTypes('https://pokeapi.co/api/v2/type?limit=999');\n  }, []);\n\n  //component did update\n  useEffect(() => {\n    if (!pokemons.length) return;\n\n    loadPokemonsInfo(pokemons);\n\n  }, [pokemons]);\n\n  const loadMoreClick = (event) => {\n    setPokemonsInfo(null);\n    setSelectedPokemon(null);\n\n    loadPokemons(serverInfo.next);\n  };\n\n  const getSelectOptions = (pokemonTypes) => {\n    if (!pokemonTypes) return;\n    const types = pokemonTypes.results;\n\n    return types.map(({ name }) => ({ value: name, text: name }))\n  };\n\n  const changeFilterQuery = (event) => {\n    setFilterQuery(event.target.textContent);\n    filterPokemons();\n  };\n\n  return (\n    <>\n      <div className=\"select\">\n        <Select placeholder='Filter by types...' options={getSelectOptions(pokemonTypes) || []} onChange={changeFilterQuery} />\n      </div>\n      <section className=\"pokemonsSection\">\n        {pokemonsInfo ? (\n          <>\n            <div className=\"pokemonList\">\n              {(filteredPokemons || pokemonsInfo).map(pokemonInfo => <Pokemon key={pokemonInfo.name} pokemonInfo={pokemonInfo} />)}\n            </div>\n            {selectedPokemon && <PokemonDetails pokemonInfo={pokemonsInfo.find(item => item.name === selectedPokemon)} />}\n          </>\n        ) : (\n          <div className=\"loading\">\n            <Segment>\n              <Dimmer active inverted>\n                <Loader inverted>Loading</Loader>\n              </Dimmer>\n              <Image src='https://react.semantic-ui.com/images/wireframe/short-paragraph.png' />\n            </Segment>\n          </div>\n        )}\n      </section>\n      <button className=\"loadMore\" onClick={loadMoreClick}>Load More</button>\n    </>\n  );\n};\n\nconst mapStateToProps = state => ({\n  pokemons: getPokemons(state),\n  pokemonsInfo: getPokemonsInfo(state),\n  selectedPokemon: getSelectedPokemon(state),\n  serverInfo: getSeverInfo(state),\n  pokemonTypes: getPokemonTypes(state),\n  filteredPokemons: getFilteredPokemons(state),\n});\n\nconst mapDispatchToProps = dispatch => ({\n  loadPokemons: (url) => dispatch(loadPokemons(url)),\n  setPokemonsInfo: pokemonsInfo => dispatch(setPokemonsInfo(pokemonsInfo)),\n  setSelectedPokemon: (name) => dispatch(setSelectedPokemon(name)),\n  loadPokemonTypes: (url) => dispatch(loadPokemonTypes(url)),\n  setFilterQuery: (filterQuery) => dispatch(setFilterQuery(filterQuery)),\n  filterPokemons: () => dispatch(filterPokemons()),\n});\n\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(PokemonList);\n","import React from 'react';\nimport './App.css';\nimport PokemonList from \"./components/pokemonList/PokemonList\";\n\nfunction App() {\n\n  return (\n    <div className=\"App\">\n      <PokemonList />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport store from './store';\n\n\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}